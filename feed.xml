<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Based And Pasted</title>
    <link href="https://m0n7y5.github.io/feed.xml" rel="self" />
    <link href="https://m0n7y5.github.io" />
    <updated>1970-01-01T01:00:00+01:00</updated>
    <author>
        <name>Admin</name>
    </author>
    <id>https://m0n7y5.github.io</id>

    <entry>
        <title>Beef DLL Creation &amp; Research</title>
        <author>
            <name>Admin</name>
        </author>
        <link href="https://m0n7y5.github.io/beef-dll-creation-and-research-2/"/>
        <id>https://m0n7y5.github.io/beef-dll-creation-and-research-2/</id>
            <category term="Research"/>
            <category term="DLL"/>
            <category term="Beeflang"/>
            <category term="Beef"/>

        <updated>2020-09-03T13:54:03+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://m0n7y5.github.io/media/posts/4/screenEdited.png" alt="" />
                     Beef language is still in heavy development. Anything can change at any time in Beef language and thus this document may not be valid anymore! Beef is an open source performance-oriented compiled programming language. Basically it's C language with C# like syntax. OOP paradigm&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://m0n7y5.github.io/media/posts/4/screenEdited.png" alt="" />
                
  <p class="msg msg--warning">
    Beef language is still in heavy development. Anything can change at any time in Beef language and thus this document may not be valid anymore!
  </p>

  <p>
    
  </p>

  <div class="post__toc">
    <h3>Content</h3>
    <ul>
      <li><a href="#requirementsnbspbr">Requirements&nbsp;<br></a></li><li><a href="#about-beefbr">About Beef<br></a></li><li><a href="#beef-dll-and-dllmain">Beef DLL and DllMain</a></li><li><a href="#exporting-methods">Exporting methods</a></li><li><a href="#how-to-work-with-threads">How to work with threads</a></li>
    </ul>
  </div>
  

    <h2 id="requirementsnbspbr">
      Requirements&nbsp;<br>
    </h2>

  <ul>
    <li>Latest BeefIDE (nightly)
</li><li>DebugView++</li>
  </ul>

    <h2 id="about-beefbr">
      About Beef<br>
    </h2>

  <p>
    Beef is an open source performance-oriented compiled programming language. Basically it's C language with C# like syntax. OOP paradigm also can be used for developing applications since in Beef you can create custom reference types (Objects) and combine it with polymorphism. Reflection is also possible. Its quite fast and its fun to work with. More info can be found here -&gt; https://www.beeflang.org/
  </p>

    <h2 id="beef-dll-and-dllmain">
      Beef DLL and DllMain
    </h2>

  <p>
    So first we need to create DLL project in Beef IDE. Go to File -&gt; New -&gt; New Project and choose Dynamic Library.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/ProjectCreation.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/ProjectCreation-2xl.png 1600w"  height="282" width="372" alt="" />
      
    </figure>

  <p>
    Now we need to add new class called Program. Like this:
  </p>
<pre class="line-numbers  language-csharp"><code>namespace DLLResearch
{
	public static class Program
	{
	}
}</code></pre>

  <p>
    So... Normally when you are creating DLL (for example in C/++) you define DllMain method which is gonna be called when a process is going to try and load our library using, for example, LoadLibrary function from Win32 API. However, this is not possible in Beef since DllMain is already handled by Beef Runtime.
<br>
<br>So what we gonna do now? ðŸ¤” It turns out that the solution is very simple. Only thing we need to do is write a public static constructor and deconstructor for class Program.
  </p>
<pre class="line-numbers  language-csharp"><code>using System.Diagnostics;
using System;
namespace DLLResearch
{
        [AlwaysInclude] // &lt;- We need this to include our class in DLL, Normally you dont need this
	public static class Program
	{
		public static this() // &lt;- This will gets called when our library gets loaded
		{
			Debug.WriteLine("Hello From Beef DLL :3");
		}

		public static ~this() // &lt;- This will gets called when our library gets unloaded
		{
			Debug.WriteLine("See ya next time my friend :)");
		}
	}
}</code></pre>

  <p>
    So lets compile it and inject it into some process. I am gonna use notepad.
<br>As you can see, when we inject our library into notepad we can see this in DebugView++.<br>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/Loaded1.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/Loaded1-2xl.png 1600w"  height="130" width="701" alt="" />
      <figcaption>DebugView++ Output: Printed message from static contructor</figcaption>
    </figure>

  <p>
    Our constructor get called and we printed first message. So lets try to unload our library and see what happens.&nbsp;<br>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/Unloaded1.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/Unloaded1-2xl.png 1600w"  height="142" width="686" alt="" />
      <figcaption>DebugView++ Output: Printed message from static decontructor</figcaption>
    </figure>

  <p>
    Looks like our deconstructor gets called.<br>
  </p>

  <p class="msg msg--highlight">
    <strong>Note:</strong> Our deconstructor also gets called when process, where our library is loaded, gonna exit.
<br>
  </p>

    <h2 id="exporting-methods">
      Exporting methods
    </h2>

  <p>
    So what if we want to export some methods from our DLL? Well... Thats a really simple task. Just write your method and throw <code>ExportAttribute</code> on it like this:
  </p>
<pre class="line-numbers  language-csharp"><code>[Export]
public static int32 MyAmazingMethod(int32 a, int32 b)
{
    return a + b;
}</code></pre>

  <p>
    This will export your method using Beef style mangling. Ez ...&nbsp;
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/peview_ZD5g1EkpwT.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_ZD5g1EkpwT-2xl.png 1600w"  height="75" width="516" alt="" />
      <figcaption>Exported method using Beef-style mangling</figcaption>
    </figure>

  <p>
    But what if you want to use your exported method in some app using C-style API? Then you need to add <code>CLinkAttribute</code>. That will export your method using C-style mangling.
  </p>
<pre class="line-numbers  language-csharp"><code>[Export, CLink]
public static int32 MyAmazingMethod(int32 a, int32 b)
{
    return a + b;
}</code></pre>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/peview_GBlChSEyrD.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_GBlChSEyrD-2xl.png 1600w"  height="70" width="337" alt="" />
      <figcaption>Exported method using C-style mangling</figcaption>
    </figure>

  <p>
    See? It's that easy!&nbsp;
  </p>

  <p>
    In case we need C++ mangling we can use&nbsp;<code>LinkNameAttribute</code>. You can use this attribute to specify link name for importing methods from another library or to specify mangling style for exported method. Actually you don't need <code>CLinkAttribute</code> at all. You can use <code>LinkName(.C)</code> instead!
  </p>
<pre class="line-numbers  language-csharp"><code>[Export, LinkName(.CPP)]
public static int32 MyAmazingMethod(int32 a, int32 b)
{
    return a + b;
}</code></pre>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/peview_k4UffocXyl.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/peview_k4UffocXyl-2xl.png 1600w"  height="66" width="506" alt="" />
      <figcaption>Exported method using C++ style mangling</figcaption>
    </figure>

  <p>
    As you can see, <strong>calling convention</strong> <code>__cdecl</code> is used by default. If you want to change that, you need to use&nbsp;<code>CallingConventionAttribute</code>. For example, this is how we export our method using <code>__stdcall</code> calling convention ...
  </p>
<pre class="line-numbers  language-csharp"><code>[Export, LinkName(.CPP), CallingConvention(.Stdcall)]
public static int32 MyAmazingMethod(int32 a, int32 b)
{
    return a + b;
}</code></pre>

  <p class="msg msg--highlight">
    <strong>Note:</strong> That works only when we are targeting x86 platform
  </p>

    <h2 id="how-to-work-with-threads">
      How to work with threads
    </h2>

  <p class="msg msg--warning">
    <strong>WARNING!</strong>&nbsp; Due to a bug in previous version of Beef, this works only in version 0.42.6 (Nightly 09/02/2020) and newer!
  </p>

  <p>
    So ... what if we want to use threads? How can we start a thread on DLL loading and how can we terminate thread on DLL unloading? We also need to make sure that the process, where our DLL is loaded, will exit gracefully.
  </p>

  <p>
    Lets add one thread called <code>myThread</code> and initialize it, so it will run our method called <code>ThreadMethod</code>.
  </p>
<pre class="line-numbers  language-csharp"><code>using System.Diagnostics;
using System;
using System.Threading;
namespace DLLResearch
{
	[AlwaysInclude]
	public static class Program
	{
		public static Thread myThread = new Thread(new () =&gt; ThreadMethod());

		public static this()
		{
			Debug.WriteLine("Hello From Beef DLL :3");
		}

		public static ~this()
		{
			Debug.WriteLine("See ya next time my friend :)");
		}

		public static void ThreadMethod()
		{
			//...
		}
	}
}</code></pre>

  <p>
    Right now, it will just initialize new thread and nothing else. Let's say that we want our thread periodically print some message. Our <code>ThreadMethod</code> will gonna look like this:
  </p>
<pre class="line-numbers  language-csharp"><code>public static void ThreadMethod()
{
    Debug.WriteLine("ThreadMethod started.");
    var i = 0; 
    while(true)
    {
        Debug.WriteLine("Hello from Beef DLL. Counter: {}", i++);
        Thread.Sleep(500); // Wait 500 ms
    }
    Debug.WriteLine("ThreadMethod ended.");
}</code></pre>

  <p>
    But this code has one big problem. In this case, our DLL will not be unloaded from a process, because <code>ThreadMethod</code> <strong>will never end!</strong> We need some form of signalization that will notify our thread that we want to exit. How we are gonna do that? Simply declare new static boolean called <code>exit</code>. And replace <code>while(true)</code> with&nbsp;<code>while(!exit)</code>. That's it!
  </p>

  <p>
    Last thing we need to do is start <code>myThread</code> inside contructor and terminate it in decontructor:
  </p>
<pre class="line-numbers  language-csharp"><code>using System.Diagnostics;
using System;
using System.Threading;
namespace DLLResearch
{
	[AlwaysInclude] // &lt;- We need this to include our class
	public static class Program
	{
		public static Thread myThread = new Thread(new () =&gt; ThreadMethod());
		public static bool exit = false;

		// This will gets called when our library gets loaded
		public static this() 
		{
			myThread.Start(); // &lt;- Start our thread
			Debug.WriteLine("Hello From Beef DLL :3");
		}

		// This will gets called when our library gets unloaded
		public static ~this() 
		{
			exit = true; // Notify we want to exit
			myThread.Join(500); // Wait max 500 ms for thread to finish
			
			Debug.WriteLine("See ya next time my friend :)");
		}

		public static void ThreadMethod()
		{
			Debug.WriteLine("ThreadMethod started.");
			var i = 0; 
			while(!exit)
			{
				Debug.WriteLine("Hello from Beef DLL. Counter: {}", i++);
				Thread.Sleep(500); // Wait 500 ms
			}
			Debug.WriteLine("ThreadMethod ended.");
		}
	}
}
</code></pre>

  <p>
    Compile it and inject your DLL into some process (notepad in my case) and after some time unload it.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://m0n7y5.github.io/media/posts/4/DebugView_2MlTYjqQfV.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-xs.png 300w ,https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-sm.png 480w ,https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-md.png 768w ,https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-lg.png 1024w ,https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-xl.png 1360w ,https://m0n7y5.github.io/media/posts/4/responsive/DebugView_2MlTYjqQfV-2xl.png 1600w"  height="700" width="700" alt="" />
      <figcaption>DebugView++ Output: Output from DLL</figcaption>
    </figure>

  <p>
    And it works! Working on DLL using Beef is fun and really simple. Next time i am gonna try to create simple plugin system for DLLs made in Beef.&nbsp;
  </p>
            ]]>
        </content>
    </entry>
</feed>
